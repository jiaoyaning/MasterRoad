import com.android.build.gradle.internal.dsl.*
import com.android.build.gradle.internal.plugins.AppPlugin
import com.android.builder.core.AbstractProductFlavor

/**
 * 插件入口 com.android.application.properties
 * @see AppPlugin
 */
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.protobuf'
apply plugin: 'com.alibaba.arouter'
apply from: "$rootDir/upload.gradle"
apply from: 'SimplePlugin.gradle' //自定义极简插件，路径方式引入
//apply plugin: 'com.jyn.helloworld'

/*
 * 配置构建 官方文档
 * https://developer.android.com/studio/build?hl=zh-cn
 *
 * 补齐Android技能树 - 玩转Gradle(一)
 * https://juejin.cn/post/6950643579643494431
 * 补齐Android技能树——从AGP构建过程到APK打包过程
 * https://juejin.cn/post/6963527524609425415
 * 补齐Android技能树 - 从害怕到玩转Android代码混淆
 * https://juejin.cn/post/6966526844552085512
 */
def app = rootProject.ext

/**
 * Android Gradle plugin官方文档：
 * https://developer.android.com/reference/tools/gradle-api
 *
 * @see AppPlugin#createExtension
 * @see BaseAppModuleExtension
 */
android {
    compileSdkVersion app.compileSdkVersion

    /**
     * @see DefaultConfig
     */
    defaultConfig {
        /**
         * @see AbstractProductFlavor* @see BaseFlavor
         */
        applicationId app.applicationId
        minSdkVersion app.minSdkVersion
        targetSdkVersion app.targetSdkVersion
        versionCode app.versionCode
        versionName app.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        multiDexEnabled true

        /**
         * @see BaseFlavor#javaCompileOptions(Action)
         *
         * {@link JavaCompileOptions}
         * @see JavaCompileOptions#annotationProcessorOptions(Action)
         *
         * {@link AnnotationProcessorOptions}
         * @see AnnotationProcessorOptions#argument
         */
        javaCompileOptions {
            annotationProcessorOptions {
                argument("AROUTER_MODULE_NAME", project.getName())
                argument("room.schemaLocation", "$projectDir/schemas".toString())
            }
        }
    }

    packagingOptions {
        exclude 'META-INF/AL2.0'
        exclude 'META-INF/LGPL2.1'
    }

    /*
     * R8编译器官方文档
     * https://developer.android.google.cn/studio/build/shrink-code
     *
     * Android 混淆，新引入的D8、R8改变了什么？
     * https://mp.weixin.qq.com/s/PxrW7LSDuAAeqlXFxnIInA
     */
    buildTypes {
        release {
            minifyEnabled true //R8 代码缩减功能
            shrinkResources true //缩减资源 : 资源缩减只有在与代码缩减配合使用时才能发挥作用
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    /*
     * kotlin-android-extensions插件被废弃，推荐使用viewBinding
     * https://mp.weixin.qq.com/s/keR7bO-Nu9bBr5Nhevbe1Q
     */
    buildFeatures {
        dataBinding true
        viewBinding true
        compose true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11.toString()
        useIR = true
    }

    composeOptions {
        /**
         * Compose 与 Kotlin 的兼容性对应关系
         * https://developer.android.com/jetpack/androidx/releases/compose-kotlin
         */
        kotlinCompilerExtensionVersion = app.compose
    }
}
/**
 * https://www.jianshu.com/p/cc98a6b4f52e
 * gradle 高级用法
 *
 * compile : 会传递依赖
 * implementation : 不会传递依赖
 *      子依赖的子依赖修改代码时，可以不用进行全部编译
 * api : 会传递依赖，代替compile
 *
 * @see DependencyHandler#add(String, Object)
 * @see JavaPlugin
 */
dependencies {
    def dep = app.addDep
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(path: ':language')
    implementation project(path: ':leetcode')
    implementation project(path: ':common')
    implementation project(path: ':Plugin:APT')
    kapt project(path: ':Plugin:APT-processor')

    dep(dependencies, "testImplementation", app.test)
    dep(dependencies, "androidTestImplementation", app.androidTest)
    dep(dependencies, "implementation", app.kotlinList)
    dep(dependencies, "implementation", app.composeList)
    dep(dependencies, "implementation", app.androidx)
    dep(dependencies, "implementation", app.http)
    dep(dependencies, "implementation", app.utils)

    //只引入，不参与打包，这样即可在External Libraries 中看到其源码了
    compileOnly "com.android.tools.build:gradle:$app.gradle_version"
}

afterEvaluate {
    println("3. 第三执行的Gradle文件 -> ${app.getLogMsg.invoke(getClass())}（此后按settings.gradle中include的顺序执行）")
}