/**
 *  https://stackoom.com/question/sg66/在gradle脚本中跟踪每个任务的执行时间
 *  ./gradlew assembleDebug --profile 命令也是一样的效果
 */

import java.util.concurrent.TimeUnit

// Log timings per task.
class TimingsListener implements TaskExecutionListener, BuildListener {
    private long startTime
    private timings = []

    @Override
    void beforeExecute(Task task) {
        startTime = System.nanoTime()
        println "-- TimingsListener beforeExecute task:" + task.name
    }

    @Override
    void afterExecute(Task task, TaskState taskState) {
        def ms = TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS);
        timings.add([ms, task.path])
        task.project.logger.warn "${task.path} took ${ms}ms"
        println "-- TimingsListener afterExecute task:" + task.name
    }

    @Override
    void buildFinished(BuildResult result) {
        println "----- TimingsListener Task timings:"
        for (timing in timings) {
            if (timing[0] >= 50) {
                printf "%7sms  %s\n", timing
            }
        }
    }

    @Override
    void buildStarted(Gradle gradle) {}

    @Override
    void projectsEvaluated(Gradle gradle) {}

    @Override
    void projectsLoaded(Gradle gradle) {}

    @Override
    void settingsEvaluated(Settings settings) {}
}

/**
 * 注册task监听
 */
//gradle.addListener new TimingsListener()