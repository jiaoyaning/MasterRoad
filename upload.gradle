import groovy.json.JsonSlurper
import groovy.json.JsonOutput

/**
 * 打包上传脚本
 */
rootProject.ext {
    API_KEY = "e82e4fc6296107d021bd20f0723b18d8"
    APP_KEY = "11a4db2b0c7459571fa453122d8411fc"
    PWD = "123456"
    PGY_URL = "https://www.pgyer.com/apiv2"
}

//打包测试环境apk并上传蒲公英
task uploadDebugApk(dependsOn: ['assembleDebug']) {
    doLast {
        uploadAPK(true)
    }
}

//打包生产环境apk并上传蒲公英
task uploadReleaseApk(dependsOn: ['assembleRelease']) {
    doLast {
        uploadAPK(false)
    }
}

/**
 * 上传apk文件
 * @param isDebug 是否是debug包
 * @param apiKey 蒲公英apk key
 * @param pwd 默认下载密码
 */
def uploadAPK(boolean isDebug) {
    //本地apk文件路径
    def apkPath = project.getBuildDir().absolutePath + "/outputs/apk/" + (isDebug ? "debug" : "release")
    println("apkPath : ${apkPath}")
    def apkFile = new File(apkPath).listFiles().grep { it.name.endsWith("apk") }.sort { it.lastModified() }.last()
    println("upload apk file : ${apkFile.absolutePath}")
    //上次打包时的 commit ID
    def lastCommitId = getLastCommitId()

    def ext = rootProject.ext
    def uploadCurl = "curl \"${ext.PGY_URL}/app/upload\" -X POST " +
            "--form \"file=@${apkFile}\" " +
            "-F \"_api_key=${ext.API_KEY}&" +
            "buildInstallType=2&" +
            "buildPassword=${ext.PWD}&" +
            "buildUpdateDescription=${getUploadDescription()}\""

    println("uploadCurl : ${uploadCurl}")
    def process = uploadCurl.execute()
    process.waitFor()
    println("uploadResult : ${process.text}")
}

static def getUploadDescription() {
    return "CommitID:" + getLatestCommitID() +
            "Uploader:" + System.getProperty("user.name")
}

/**
 * 获取上一次打包时的commit ID
 */
def getLastCommitId() {
    def ext = rootProject.ext
    def appViewCurl = "curl \"${extw.PGY_URL}/app/view\" -X POST -d \"_api_key=${ext.API_KEY}&appKey=${ext.APP_KEY}\""
    println("appViewCurl : ${appViewCurl}")
    def appInfo = appViewCurl.execute().text
    println("LastAppInfo : ${appInfo}")
    def appInfoJson = new JsonSlurper().parseText(appInfo)
    if (appInfoJson.code != 0) throw new RuntimeException(resp.message)

    def des = appInfoJson.data.buildUpdateDescription.split("\n").find { it.startsWithIgnoreCase("CommitID") }
    println("LastAppCommitID :${des}")
    if (des == null || des.size() == 0) return ""
    def id = des.takeAfter(":")
    println("LastCommitId :${id}")
    return id
}

/**
 * 是否与git仓库同步
 */
static def isPushOrigin() {
    //TODO
}

/**
 * 获取最近一次的commit id
 * @return
 */
static def getLatestCommitID() {
    return "git rev-parse --short HEAD".execute().text.replace("\n", "\\n")
}

//================= 钉钉机器人 =====================
class ContentModel {
    String text
    String title
}

/**
 * git log 9f8b9876..bcaef8e9  --pretty=format:'%s' --abbrev-commit
 */
def sendMsgToDing(def data, def url, def pwd) {
    def dingURL = "https://oapi.dingtalk.com/robot/send?access_token=5a854c11b17ca617a90c3b615d63047190b19b01e494fc4de24821844fd90e6c"

    def conn = new URL(dingURL).openConnection()
    conn.setRequestMethod('POST')
    conn.setRequestProperty("Connection", "Keep-Alive")
    conn.setRequestProperty("Content-type", "application/json;charset=UTF-8")
    conn.setConnectTimeout(30000)
    conn.setReadTimeout(30000)
    conn.setDoInput(true)
    conn.setDoOutput(true)
    def dos = new DataOutputStream(conn.getOutputStream())
    HashMap<String, Object> map = new HashMap<>()
    map.put("msgtype", "markdown")
    ContentModel contentModel = new ContentModel()
    String k = "git log  -3  --pretty=format:'%s' --abbrev-commit".execute()
            .text
            .replaceAll("'", "")
            .replaceAll("\n", "  \n")

    println "stdout: ${k}"
    contentModel.title = "QMS Android"
    contentModel.text =
            "## QMS Android包" + " \n " +
                    "### build:" + data.buildBuildVersion + " \n " +
                    "### 下载地址\n [" + url + "](" + url + ")" + " \n " +
                    "### 密码：" + pwd + " \n " +
                    "![扫码下载](" + data.buildQRCodeURL + ")" + " \n " +
                    "### 最近更新\n " + k

    map.put("markdown", contentModel)
    def json = JsonOutput.toJson(map)
    println("contentModel：" + json)
    dos.writeBytes(json)
    def input = new BufferedReader(new InputStreamReader(conn.getInputStream()))
    String line = ""
    String result = ""
    while ((line = input.readLine()) != null) {
        result += line
    }
    dos.flush()
    dos.close()
    input.close()
    conn.connect()
    println(result)
}
